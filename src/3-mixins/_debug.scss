@mixin debug-baseline($color: $typey-debug-color, $line-height: ($base-line-height / 4)) {
	@if enabled(debug) {
		background-image: linear-gradient(
			to bottom,
			rgba($color, 0.3) 1px,
			transparent 1px
		);
		background-position: left top;
		background-repeat: repeat;
		background-size: 100% $line-height;
	}
}

@mixin debug-media($options: ()) {
	$debug-media-defaults: (
		left: 0,
		right: auto,
		width: auto,
	);
	$options: map-merge($debug-media-defaults, $options);
	@if enabled(debug) {
		$i: 2;
		body:before {
			position: fixed !important;
			top: 0;
			left: map-get($options, left);
			right: map-get($options, right);
			width: map-get($options, width);
			height: spacing(0.5);
			content: 'default';
			color: debug-color(black);
			font: 10px sans-serif;
			@include line-height(0.5);
			text-align: center;
			background-color: debug-color($i);
			padding: 0 3px;
			margin: 0 auto;
			@include z-index(modal);
			@each $key, $value in $breakpoints {
				$i: $i+1;
				@include media("screen", ">=#{$key}") {
					content: "#{$key} - #{$value}";
					background-color: debug-color($i);
				}
			}
		}
	}
}

@mixin debug-grid($options: ()) {
	$debug-grid-defaults: (
		color: rgba(0,0,0,0.05),
		max-width: $max-page-width,
		media: null,
		selector: '.debug-grid',
	);
	$options: map-merge($debug-grid-defaults, $options);
	$media: map-get($options, media);

	@if enabled(debug) {
		@include _debug-grid($options, default);
		@for $i from 1 through length($media) {
			$breakpoint: nth($media, $i);
			@if map-has-key($breakpoints, $breakpoint) {
				@include media(">=#{$breakpoint}") {
					@include _debug-grid($options, $breakpoint);
				}
			}
		}
	}
}

@mixin _debug-grid($options, $breakpoint) {
	$grid-offset: (offset($breakpoint) * 2) - gutter($breakpoint);
	#{map-get($options, selector)} {
		position: fixed;
		top: 0;
		left: offset($breakpoint);
		right: 0;
		width: calc(100vw - #{$grid-offset});
		height: 100vh;
		pointer-events: none;
		overflow: hidden;
		@include z-index(modal);
		@include media('>#{map-get($options, max-width)}') {
			left: gutter($breakpoint);
			width: map-get($options, max-width) - $grid-offset;
			margin: 0 auto;
		}
		> div {
			float: left;
			height: 100vh;
			width: calc(#{100% / columns($breakpoint)} - #{gutter($breakpoint)});
			background-color: map-get($options, color);
			margin-right: gutter($breakpoint);
			&:nth-child(1n+#{columns($breakpoint) + 1}) {
				display: none;
			}
			&:nth-child(-n+#{columns($breakpoint)}) {
				display: block;
			}
		}
	}
}
