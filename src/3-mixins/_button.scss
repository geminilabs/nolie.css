@mixin button() {
	@include typeface(button);
	@include font-size(m);
	@include spacing(line-height, $base-line-height - $border-width * 2);
	@include padding(0.25 0.75);
	@include margin-bottom(1);
	position: relative;
	display: inline-block;
	text-align: center;
	text-decoration: none;
	outline: none;
	cursor: pointer;
	border: $border-width solid transparent;
	border-radius: $button-radius;
	user-select: none;
	vertical-align: top;
	&:hover {
		outline: none;
		text-decoration: none;
	}
	&[disabled],
	&.disabled {
		opacity: 0.7;
		cursor: default;
	}
}

@mixin button-style-solid($options: ()) {
	@include _button-style($options);
}

@mixin button-solid($color, $text) {
	@include button-style-solid((
		background-color: $color,
		border-color: $color,
		color: $text,
		hover: (
			background-color: darken($color, 10),
			border-color: darken($color, 10),
			color: $text,
		),
		active: (
			background-color: darken($color, 20),
			border-color: darken($color, 20),
			color: $text,
		),
		disabled: (
			background-color: $color,
			border-color: $color,
			color: $text,
		),
	));
}

@mixin button-style-outline($options: ()) {
	$options: extend((
		background-color: transparent,
		border-color: currentColor,
		color: color(primary),
		hover: (
			background-color: color(white),
			border-color: currentColor,
			color: darken(color(primary), 10),
		),
		active: (
			background-color: color(white),
			border-color: currentColor,
			color: darken(color(primary), 20),
		),
		disabled: (
			background-color: transparent,
			border-color: currentColor,
			color: color(primary),
		),
	), $options, true);
	@include _button-style($options);
}

@mixin button-outline($color) {
	@include button-style-outline((
		color: $color,
		hover: (
			color: darken($color, 10),
		),
		active: (
			color: darken($color, 20),
		),
		disabled: (
			color: $color,
		),
	));
}

@mixin button-transition($speed: 0.125s, $translateY: 1px) {
	transition: color $speed ease-in-out,
				background-color $speed ease-in-out,
				border-color $speed ease-in-out;
	&:not([disabled]):not(.disabled):active {
		transform: translate3d(0,$translateY,0);
	}
}

@mixin button-tiny {
	@include font-size(xs);
	@include padding(0 0.5);
}

@mixin button-small {
	@include font-size(s);
	@include padding(0.125 0.75);
	@include margin-bottom(1.25);
}

@mixin button-medium {
	@include font-size(m);
	@include padding(0.5 1);
}

@mixin button-large {
	@include font-size(l);
	@include padding(0.75 2);
}

@mixin button-round {
	@include spacing(border-radius, 10);
}

@mixin button-upper {
	text-transform: uppercase;
	letter-spacing: 0.0625em;
}

@mixin button-group {
	&-group {
		display: inline-block;
		vertical-align: bottom;
	}
	&-group & {
		float: left;
		z-index: 1;
		&:hover,
		&:focus {
			z-index: 2;
		}
		&:active,
		&.active {
			z-index: 3;
		}
		&:first-child {
			border-radius: $border-radius 0 0 $border-radius;
		}
		&:last-child {
			border-radius: 0 $border-radius $border-radius 0;
		}
		&:not(:first-child):not(:last-child) {
			border-radius: 0;
		}
		&:not(:first-child) {
			margin-left: - $border-width;
		}
	}
}

@mixin button-icons {
	& i {
		@include margin-right(0.125);
	}
}

@mixin _button-style($options: ()) {
	$default: (
		background-color: color(primary),
		border-color: color(primary),
		color: color(white),
	);
	$options: extend((
		hover: map-merge((
			background-color: darken(color(primary), 10),
			border-color: darken(color(primary), 10),
		), $default),
		active: map-merge((
			background-color: darken(color(primary), 20),
			border-color: darken(color(primary), 20),
		), $default),
		disabled: $default,
	), $default, $options, true);

	color: map-get($options, color);
	background-color: map-get($options, background-color);
	border-color: map-get($options, border-color);

	&:hover {
		$hover-color: map-get(map-get($options, hover), color);
		$hover-background-color: map-get(map-get($options, hover), background-color);
		$hover-border-color: map-get(map-get($options, hover), border-color);
		@if $hover-color != map-get($options, color) {
			color: $hover-color;
		}
		@if $hover-background-color != map-get($options, background-color) {
			background-color: $hover-background-color;
		}
		@if $hover-border-color != map-get($options, border-color) {
			border-color: $hover-border-color;
		}
	}
	&:active,
	&.active {
		$active-color: map-get(map-get($options, active), color);
		$active-background-color: map-get(map-get($options, active), background-color);
		$active-border-color: map-get(map-get($options, active), border-color);
		@if $active-color != map-get($options, color) {
			color: $active-color;
		}
		@if $active-background-color != map-get($options, background-color) {
			background-color: $active-background-color;
		}
		@if $active-border-color != map-get($options, border-color) {
			border-color: $active-border-color;
		}
	}
	&[disabled],
	&.disabled {
		color: map-get(map-get($options, disabled), color);
		background-color: map-get(map-get($options, disabled), background-color);
		border-color: map-get(map-get($options, disabled), border-color);
	}
}
